package com.androidtask.repository.local.persistence;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.androidtask.domain.models.Roles;
import com.androidtask.domain.models.UserDetails;

import com.androidtask.domain.models.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, String> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MEmail = new Property(0, String.class, "mEmail", true, "M_EMAIL");
        public final static Property MPassword = new Property(1, String.class, "mPassword", false, "M_PASSWORD");
        public final static Property MRole = new Property(2, String.class, "mRole", false, "M_ROLE");
        public final static Property MMarked = new Property(3, Boolean.class, "mMarked", false, "M_MARKED");
        public final static Property Nick_name = new Property(4, String.class, "nick_name", false, "NICK_NAME");
        public final static Property Ban_date = new Property(5, java.util.Date.class, "ban_date", false, "BAN_DATE");
        public final static Property Ban_reason = new Property(6, String.class, "ban_reason", false, "BAN_REASON");
        public final static Property Id_user_details = new Property(7, String.class, "id_user_details", false, "ID_USER_DETAILS");
    }

    private DaoSession daoSession;

    private final RoleTypeConverter mRoleConverter = new RoleTypeConverter();

    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"M_EMAIL\" TEXT PRIMARY KEY NOT NULL ," + // 0: mEmail
                "\"M_PASSWORD\" TEXT NOT NULL ," + // 1: mPassword
                "\"M_ROLE\" TEXT NOT NULL ," + // 2: mRole
                "\"M_MARKED\" INTEGER NOT NULL ," + // 3: mMarked
                "\"NICK_NAME\" TEXT NOT NULL ," + // 4: nick_name
                "\"BAN_DATE\" INTEGER," + // 5: ban_date
                "\"BAN_REASON\" TEXT," + // 6: ban_reason
                "\"ID_USER_DETAILS\" TEXT);"); // 7: id_user_details
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getMEmail());
        stmt.bindString(2, entity.getMPassword());
        stmt.bindString(3, mRoleConverter.convertToDatabaseValue(entity.getMRole()));
        stmt.bindLong(4, entity.getMMarked() ? 1L: 0L);
        stmt.bindString(5, entity.getNick_name());
 
        java.util.Date ban_date = entity.getBan_date();
        if (ban_date != null) {
            stmt.bindLong(6, ban_date.getTime());
        }
 
        String ban_reason = entity.getBan_reason();
        if (ban_reason != null) {
            stmt.bindString(7, ban_reason);
        }
 
        String id_user_details = entity.getId_user_details();
        if (id_user_details != null) {
            stmt.bindString(8, id_user_details);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getMEmail());
        stmt.bindString(2, entity.getMPassword());
        stmt.bindString(3, mRoleConverter.convertToDatabaseValue(entity.getMRole()));
        stmt.bindLong(4, entity.getMMarked() ? 1L: 0L);
        stmt.bindString(5, entity.getNick_name());
 
        java.util.Date ban_date = entity.getBan_date();
        if (ban_date != null) {
            stmt.bindLong(6, ban_date.getTime());
        }
 
        String ban_reason = entity.getBan_reason();
        if (ban_reason != null) {
            stmt.bindString(7, ban_reason);
        }
 
        String id_user_details = entity.getId_user_details();
        if (id_user_details != null) {
            stmt.bindString(8, id_user_details);
        }
    }

    @Override
    protected final void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getString(offset + 0), // mEmail
            cursor.getString(offset + 1), // mPassword
            mRoleConverter.convertToEntityProperty(cursor.getString(offset + 2)), // mRole
            cursor.getShort(offset + 3) != 0, // mMarked
            cursor.getString(offset + 4), // nick_name
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // ban_date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ban_reason
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // id_user_details
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setMEmail(cursor.getString(offset + 0));
        entity.setMPassword(cursor.getString(offset + 1));
        entity.setMRole(mRoleConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setMMarked(cursor.getShort(offset + 3) != 0);
        entity.setNick_name(cursor.getString(offset + 4));
        entity.setBan_date(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setBan_reason(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setId_user_details(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(User entity, long rowId) {
        return entity.getMEmail();
    }
    
    @Override
    public String getKey(User entity) {
        if(entity != null) {
            return entity.getMEmail();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDetailsDao().getAllColumns());
            builder.append(" FROM USER T");
            builder.append(" LEFT JOIN USER_DETAILS T0 ON T.\"ID_USER_DETAILS\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected User loadCurrentDeep(Cursor cursor, boolean lock) {
        User entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserDetails userDetails = loadCurrentOther(daoSession.getUserDetailsDao(), cursor, offset);
        entity.setUserDetails(userDetails);

        return entity;    
    }

    public User loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<User> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<User> list = new ArrayList<User>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<User> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<User> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}

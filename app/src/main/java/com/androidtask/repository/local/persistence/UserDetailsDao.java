package com.androidtask.repository.local.persistence;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.androidtask.domain.models.UserDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_DETAILS".
*/
public class UserDetailsDao extends AbstractDao<UserDetails, Long> {

    public static final String TABLENAME = "USER_DETAILS";

    /**
     * Properties of entity UserDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property First_name = new Property(1, String.class, "first_name", false, "FIRST_NAME");
        public final static Property Patronymic = new Property(2, String.class, "patronymic", false, "PATRONYMIC");
        public final static Property Last_name = new Property(3, String.class, "last_name", false, "LAST_NAME");
        public final static Property Phone = new Property(4, String.class, "phone", false, "PHONE");
    }

    private DaoSession daoSession;


    public UserDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public UserDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_DETAILS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FIRST_NAME\" TEXT," + // 1: first_name
                "\"PATRONYMIC\" TEXT," + // 2: patronymic
                "\"LAST_NAME\" TEXT," + // 3: last_name
                "\"PHONE\" TEXT);"); // 4: phone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_DETAILS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(2, first_name);
        }
 
        String patronymic = entity.getPatronymic();
        if (patronymic != null) {
            stmt.bindString(3, patronymic);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(4, last_name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String first_name = entity.getFirst_name();
        if (first_name != null) {
            stmt.bindString(2, first_name);
        }
 
        String patronymic = entity.getPatronymic();
        if (patronymic != null) {
            stmt.bindString(3, patronymic);
        }
 
        String last_name = entity.getLast_name();
        if (last_name != null) {
            stmt.bindString(4, last_name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(5, phone);
        }
    }

    @Override
    protected final void attachEntity(UserDetails entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserDetails readEntity(Cursor cursor, int offset) {
        UserDetails entity = new UserDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // first_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // patronymic
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // last_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // phone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirst_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPatronymic(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLast_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserDetails entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.androidtask.repository.local.persistence;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.androidtask.domain.models.FavoritePlace;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVORITE_PLACE".
*/
public class FavoritePlaceDao extends AbstractDao<FavoritePlace, String> {

    public static final String TABLENAME = "FAVORITE_PLACE";

    /**
     * Properties of entity FavoritePlace.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property City = new Property(2, String.class, "city", false, "CITY");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Photo = new Property(4, String.class, "photo", false, "PHOTO");
        public final static Property Latitude = new Property(5, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(6, Double.class, "longitude", false, "LONGITUDE");
        public final static Property UserId = new Property(7, String.class, "userId", false, "USER_ID");
    }

    private Query<FavoritePlace> user_PlacesQuery;

    public FavoritePlaceDao(DaoConfig config) {
        super(config);
    }
    
    public FavoritePlaceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVORITE_PLACE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"CITY\" TEXT NOT NULL ," + // 2: city
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"PHOTO\" TEXT NOT NULL ," + // 4: photo
                "\"LATITUDE\" REAL NOT NULL ," + // 5: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 6: longitude
                "\"USER_ID\" TEXT);"); // 7: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVORITE_PLACE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FavoritePlace entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getCity());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
        stmt.bindString(5, entity.getPhoto());
        stmt.bindDouble(6, entity.getLatitude());
        stmt.bindDouble(7, entity.getLongitude());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(8, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FavoritePlace entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getCity());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
        stmt.bindString(5, entity.getPhoto());
        stmt.bindDouble(6, entity.getLatitude());
        stmt.bindDouble(7, entity.getLongitude());
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(8, userId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FavoritePlace readEntity(Cursor cursor, int offset) {
        FavoritePlace entity = new FavoritePlace( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.getString(offset + 2), // city
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.getString(offset + 4), // photo
            cursor.getDouble(offset + 5), // latitude
            cursor.getDouble(offset + 6), // longitude
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FavoritePlace entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setCity(cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhoto(cursor.getString(offset + 4));
        entity.setLatitude(cursor.getDouble(offset + 5));
        entity.setLongitude(cursor.getDouble(offset + 6));
        entity.setUserId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FavoritePlace entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(FavoritePlace entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FavoritePlace entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "places" to-many relationship of User. */
    public List<FavoritePlace> _queryUser_Places(String userId) {
        synchronized (this) {
            if (user_PlacesQuery == null) {
                QueryBuilder<FavoritePlace> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_PlacesQuery = queryBuilder.build();
            }
        }
        Query<FavoritePlace> query = user_PlacesQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
